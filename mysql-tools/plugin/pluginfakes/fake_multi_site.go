// Code generated by counterfeiter. DO NOT EDIT.
package pluginfakes

import (
	"sync"

	"github.com/pivotal-cf/mysql-cli-plugin/mysql-tools/plugin"
)

type FakeMultiSite struct {
	ListConfigsStub        func() ([]string, error)
	listConfigsMutex       sync.RWMutex
	listConfigsArgsForCall []struct {
	}
	listConfigsReturns struct {
		result1 []string
		result2 error
	}
	listConfigsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	RemoveConfigStub        func(string) error
	removeConfigMutex       sync.RWMutex
	removeConfigArgsForCall []struct {
		arg1 string
	}
	removeConfigReturns struct {
		result1 error
	}
	removeConfigReturnsOnCall map[int]struct {
		result1 error
	}
	SaveConfigStub        func(string, string) error
	saveConfigMutex       sync.RWMutex
	saveConfigArgsForCall []struct {
		arg1 string
		arg2 string
	}
	saveConfigReturns struct {
		result1 error
	}
	saveConfigReturnsOnCall map[int]struct {
		result1 error
	}
	SetupReplicationStub        func(string, string, string, string) error
	setupReplicationMutex       sync.RWMutex
	setupReplicationArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	setupReplicationReturns struct {
		result1 error
	}
	setupReplicationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMultiSite) ListConfigs() ([]string, error) {
	fake.listConfigsMutex.Lock()
	ret, specificReturn := fake.listConfigsReturnsOnCall[len(fake.listConfigsArgsForCall)]
	fake.listConfigsArgsForCall = append(fake.listConfigsArgsForCall, struct {
	}{})
	stub := fake.ListConfigsStub
	fakeReturns := fake.listConfigsReturns
	fake.recordInvocation("ListConfigs", []interface{}{})
	fake.listConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeMultiSite) ListConfigsCallCount() int {
	fake.listConfigsMutex.RLock()
	defer fake.listConfigsMutex.RUnlock()
	return len(fake.listConfigsArgsForCall)
}

func (fake *FakeMultiSite) ListConfigsCalls(stub func() ([]string, error)) {
	fake.listConfigsMutex.Lock()
	defer fake.listConfigsMutex.Unlock()
	fake.ListConfigsStub = stub
}

func (fake *FakeMultiSite) ListConfigsReturns(result1 []string, result2 error) {
	fake.listConfigsMutex.Lock()
	defer fake.listConfigsMutex.Unlock()
	fake.ListConfigsStub = nil
	fake.listConfigsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMultiSite) ListConfigsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listConfigsMutex.Lock()
	defer fake.listConfigsMutex.Unlock()
	fake.ListConfigsStub = nil
	if fake.listConfigsReturnsOnCall == nil {
		fake.listConfigsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listConfigsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeMultiSite) RemoveConfig(arg1 string) error {
	fake.removeConfigMutex.Lock()
	ret, specificReturn := fake.removeConfigReturnsOnCall[len(fake.removeConfigArgsForCall)]
	fake.removeConfigArgsForCall = append(fake.removeConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveConfigStub
	fakeReturns := fake.removeConfigReturns
	fake.recordInvocation("RemoveConfig", []interface{}{arg1})
	fake.removeConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMultiSite) RemoveConfigCallCount() int {
	fake.removeConfigMutex.RLock()
	defer fake.removeConfigMutex.RUnlock()
	return len(fake.removeConfigArgsForCall)
}

func (fake *FakeMultiSite) RemoveConfigCalls(stub func(string) error) {
	fake.removeConfigMutex.Lock()
	defer fake.removeConfigMutex.Unlock()
	fake.RemoveConfigStub = stub
}

func (fake *FakeMultiSite) RemoveConfigArgsForCall(i int) string {
	fake.removeConfigMutex.RLock()
	defer fake.removeConfigMutex.RUnlock()
	argsForCall := fake.removeConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMultiSite) RemoveConfigReturns(result1 error) {
	fake.removeConfigMutex.Lock()
	defer fake.removeConfigMutex.Unlock()
	fake.RemoveConfigStub = nil
	fake.removeConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMultiSite) RemoveConfigReturnsOnCall(i int, result1 error) {
	fake.removeConfigMutex.Lock()
	defer fake.removeConfigMutex.Unlock()
	fake.RemoveConfigStub = nil
	if fake.removeConfigReturnsOnCall == nil {
		fake.removeConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMultiSite) SaveConfig(arg1 string, arg2 string) error {
	fake.saveConfigMutex.Lock()
	ret, specificReturn := fake.saveConfigReturnsOnCall[len(fake.saveConfigArgsForCall)]
	fake.saveConfigArgsForCall = append(fake.saveConfigArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.SaveConfigStub
	fakeReturns := fake.saveConfigReturns
	fake.recordInvocation("SaveConfig", []interface{}{arg1, arg2})
	fake.saveConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMultiSite) SaveConfigCallCount() int {
	fake.saveConfigMutex.RLock()
	defer fake.saveConfigMutex.RUnlock()
	return len(fake.saveConfigArgsForCall)
}

func (fake *FakeMultiSite) SaveConfigCalls(stub func(string, string) error) {
	fake.saveConfigMutex.Lock()
	defer fake.saveConfigMutex.Unlock()
	fake.SaveConfigStub = stub
}

func (fake *FakeMultiSite) SaveConfigArgsForCall(i int) (string, string) {
	fake.saveConfigMutex.RLock()
	defer fake.saveConfigMutex.RUnlock()
	argsForCall := fake.saveConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMultiSite) SaveConfigReturns(result1 error) {
	fake.saveConfigMutex.Lock()
	defer fake.saveConfigMutex.Unlock()
	fake.SaveConfigStub = nil
	fake.saveConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMultiSite) SaveConfigReturnsOnCall(i int, result1 error) {
	fake.saveConfigMutex.Lock()
	defer fake.saveConfigMutex.Unlock()
	fake.SaveConfigStub = nil
	if fake.saveConfigReturnsOnCall == nil {
		fake.saveConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMultiSite) SetupReplication(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.setupReplicationMutex.Lock()
	ret, specificReturn := fake.setupReplicationReturnsOnCall[len(fake.setupReplicationArgsForCall)]
	fake.setupReplicationArgsForCall = append(fake.setupReplicationArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.SetupReplicationStub
	fakeReturns := fake.setupReplicationReturns
	fake.recordInvocation("SetupReplication", []interface{}{arg1, arg2, arg3, arg4})
	fake.setupReplicationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMultiSite) SetupReplicationCallCount() int {
	fake.setupReplicationMutex.RLock()
	defer fake.setupReplicationMutex.RUnlock()
	return len(fake.setupReplicationArgsForCall)
}

func (fake *FakeMultiSite) SetupReplicationCalls(stub func(string, string, string, string) error) {
	fake.setupReplicationMutex.Lock()
	defer fake.setupReplicationMutex.Unlock()
	fake.SetupReplicationStub = stub
}

func (fake *FakeMultiSite) SetupReplicationArgsForCall(i int) (string, string, string, string) {
	fake.setupReplicationMutex.RLock()
	defer fake.setupReplicationMutex.RUnlock()
	argsForCall := fake.setupReplicationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeMultiSite) SetupReplicationReturns(result1 error) {
	fake.setupReplicationMutex.Lock()
	defer fake.setupReplicationMutex.Unlock()
	fake.SetupReplicationStub = nil
	fake.setupReplicationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeMultiSite) SetupReplicationReturnsOnCall(i int, result1 error) {
	fake.setupReplicationMutex.Lock()
	defer fake.setupReplicationMutex.Unlock()
	fake.SetupReplicationStub = nil
	if fake.setupReplicationReturnsOnCall == nil {
		fake.setupReplicationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setupReplicationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeMultiSite) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listConfigsMutex.RLock()
	defer fake.listConfigsMutex.RUnlock()
	fake.removeConfigMutex.RLock()
	defer fake.removeConfigMutex.RUnlock()
	fake.saveConfigMutex.RLock()
	defer fake.saveConfigMutex.RUnlock()
	fake.setupReplicationMutex.RLock()
	defer fake.setupReplicationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMultiSite) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ plugin.MultiSite = new(FakeMultiSite)
