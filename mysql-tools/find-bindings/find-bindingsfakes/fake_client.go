// Code generated by counterfeiter. DO NOT EDIT.
package findbindingsfakes

import (
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	find_bindings "github.com/pivotal-cf/mysql-cli-plugin/mysql-tools/find-bindings"
)

type FakeClient struct {
	GetAppByGuidStub        func(string) (cfclient.App, error)
	getAppByGuidMutex       sync.RWMutex
	getAppByGuidArgsForCall []struct {
		arg1 string
	}
	getAppByGuidReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByGuidReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetOrgByGuidStub        func(string) (cfclient.Org, error)
	getOrgByGuidMutex       sync.RWMutex
	getOrgByGuidArgsForCall []struct {
		arg1 string
	}
	getOrgByGuidReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetSpaceByGuidStub        func(string) (cfclient.Space, error)
	getSpaceByGuidMutex       sync.RWMutex
	getSpaceByGuidArgsForCall []struct {
		arg1 string
	}
	getSpaceByGuidReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	ListServiceBindingsByQueryStub        func(url.Values) ([]cfclient.ServiceBinding, error)
	listServiceBindingsByQueryMutex       sync.RWMutex
	listServiceBindingsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceBindingsByQueryReturns struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	listServiceBindingsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	ListServiceInstancesByQueryStub        func(url.Values) ([]cfclient.ServiceInstance, error)
	listServiceInstancesByQueryMutex       sync.RWMutex
	listServiceInstancesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceInstancesByQueryReturns struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	listServiceInstancesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	ListServiceKeysByQueryStub        func(url.Values) ([]cfclient.ServiceKey, error)
	listServiceKeysByQueryMutex       sync.RWMutex
	listServiceKeysByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceKeysByQueryReturns struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	listServiceKeysByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	ListServicePlansByQueryStub        func(url.Values) ([]cfclient.ServicePlan, error)
	listServicePlansByQueryMutex       sync.RWMutex
	listServicePlansByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlansByQueryReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServicesByQueryStub        func(url.Values) ([]cfclient.Service, error)
	listServicesByQueryMutex       sync.RWMutex
	listServicesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicesByQueryReturns struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetAppByGuid(arg1 string) (cfclient.App, error) {
	fake.getAppByGuidMutex.Lock()
	ret, specificReturn := fake.getAppByGuidReturnsOnCall[len(fake.getAppByGuidArgsForCall)]
	fake.getAppByGuidArgsForCall = append(fake.getAppByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAppByGuidStub
	fakeReturns := fake.getAppByGuidReturns
	fake.recordInvocation("GetAppByGuid", []interface{}{arg1})
	fake.getAppByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetAppByGuidCallCount() int {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	return len(fake.getAppByGuidArgsForCall)
}

func (fake *FakeClient) GetAppByGuidCalls(stub func(string) (cfclient.App, error)) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = stub
}

func (fake *FakeClient) GetAppByGuidArgsForCall(i int) string {
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	argsForCall := fake.getAppByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetAppByGuidReturns(result1 cfclient.App, result2 error) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = nil
	fake.getAppByGuidReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetAppByGuidReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.getAppByGuidMutex.Lock()
	defer fake.getAppByGuidMutex.Unlock()
	fake.GetAppByGuidStub = nil
	if fake.getAppByGuidReturnsOnCall == nil {
		fake.getAppByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByGuidReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetOrgByGuid(arg1 string) (cfclient.Org, error) {
	fake.getOrgByGuidMutex.Lock()
	ret, specificReturn := fake.getOrgByGuidReturnsOnCall[len(fake.getOrgByGuidArgsForCall)]
	fake.getOrgByGuidArgsForCall = append(fake.getOrgByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgByGuidStub
	fakeReturns := fake.getOrgByGuidReturns
	fake.recordInvocation("GetOrgByGuid", []interface{}{arg1})
	fake.getOrgByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetOrgByGuidCallCount() int {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	return len(fake.getOrgByGuidArgsForCall)
}

func (fake *FakeClient) GetOrgByGuidCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = stub
}

func (fake *FakeClient) GetOrgByGuidArgsForCall(i int) string {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	argsForCall := fake.getOrgByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetOrgByGuidReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	fake.getOrgByGuidReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetOrgByGuidReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	if fake.getOrgByGuidReturnsOnCall == nil {
		fake.getOrgByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetSpaceByGuid(arg1 string) (cfclient.Space, error) {
	fake.getSpaceByGuidMutex.Lock()
	ret, specificReturn := fake.getSpaceByGuidReturnsOnCall[len(fake.getSpaceByGuidArgsForCall)]
	fake.getSpaceByGuidArgsForCall = append(fake.getSpaceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSpaceByGuidStub
	fakeReturns := fake.getSpaceByGuidReturns
	fake.recordInvocation("GetSpaceByGuid", []interface{}{arg1})
	fake.getSpaceByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetSpaceByGuidCallCount() int {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return len(fake.getSpaceByGuidArgsForCall)
}

func (fake *FakeClient) GetSpaceByGuidCalls(stub func(string) (cfclient.Space, error)) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = stub
}

func (fake *FakeClient) GetSpaceByGuidArgsForCall(i int) string {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	argsForCall := fake.getSpaceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetSpaceByGuidReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	fake.getSpaceByGuidReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetSpaceByGuidReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	if fake.getSpaceByGuidReturnsOnCall == nil {
		fake.getSpaceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceBindingsByQuery(arg1 url.Values) ([]cfclient.ServiceBinding, error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceBindingsByQueryReturnsOnCall[len(fake.listServiceBindingsByQueryArgsForCall)]
	fake.listServiceBindingsByQueryArgsForCall = append(fake.listServiceBindingsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServiceBindingsByQueryStub
	fakeReturns := fake.listServiceBindingsByQueryReturns
	fake.recordInvocation("ListServiceBindingsByQuery", []interface{}{arg1})
	fake.listServiceBindingsByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceBindingsByQueryCallCount() int {
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	return len(fake.listServiceBindingsByQueryArgsForCall)
}

func (fake *FakeClient) ListServiceBindingsByQueryCalls(stub func(url.Values) ([]cfclient.ServiceBinding, error)) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = stub
}

func (fake *FakeClient) ListServiceBindingsByQueryArgsForCall(i int) url.Values {
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	argsForCall := fake.listServiceBindingsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServiceBindingsByQueryReturns(result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = nil
	fake.listServiceBindingsByQueryReturns = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceBindingsByQueryReturnsOnCall(i int, result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = nil
	if fake.listServiceBindingsByQueryReturnsOnCall == nil {
		fake.listServiceBindingsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBinding
			result2 error
		})
	}
	fake.listServiceBindingsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceInstancesByQuery(arg1 url.Values) ([]cfclient.ServiceInstance, error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceInstancesByQueryReturnsOnCall[len(fake.listServiceInstancesByQueryArgsForCall)]
	fake.listServiceInstancesByQueryArgsForCall = append(fake.listServiceInstancesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServiceInstancesByQueryStub
	fakeReturns := fake.listServiceInstancesByQueryReturns
	fake.recordInvocation("ListServiceInstancesByQuery", []interface{}{arg1})
	fake.listServiceInstancesByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceInstancesByQueryCallCount() int {
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	return len(fake.listServiceInstancesByQueryArgsForCall)
}

func (fake *FakeClient) ListServiceInstancesByQueryCalls(stub func(url.Values) ([]cfclient.ServiceInstance, error)) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = stub
}

func (fake *FakeClient) ListServiceInstancesByQueryArgsForCall(i int) url.Values {
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	argsForCall := fake.listServiceInstancesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServiceInstancesByQueryReturns(result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = nil
	fake.listServiceInstancesByQueryReturns = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceInstancesByQueryReturnsOnCall(i int, result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = nil
	if fake.listServiceInstancesByQueryReturnsOnCall == nil {
		fake.listServiceInstancesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceInstance
			result2 error
		})
	}
	fake.listServiceInstancesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceKeysByQuery(arg1 url.Values) ([]cfclient.ServiceKey, error) {
	fake.listServiceKeysByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceKeysByQueryReturnsOnCall[len(fake.listServiceKeysByQueryArgsForCall)]
	fake.listServiceKeysByQueryArgsForCall = append(fake.listServiceKeysByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServiceKeysByQueryStub
	fakeReturns := fake.listServiceKeysByQueryReturns
	fake.recordInvocation("ListServiceKeysByQuery", []interface{}{arg1})
	fake.listServiceKeysByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceKeysByQueryCallCount() int {
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	return len(fake.listServiceKeysByQueryArgsForCall)
}

func (fake *FakeClient) ListServiceKeysByQueryCalls(stub func(url.Values) ([]cfclient.ServiceKey, error)) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = stub
}

func (fake *FakeClient) ListServiceKeysByQueryArgsForCall(i int) url.Values {
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	argsForCall := fake.listServiceKeysByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServiceKeysByQueryReturns(result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = nil
	fake.listServiceKeysByQueryReturns = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceKeysByQueryReturnsOnCall(i int, result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = nil
	if fake.listServiceKeysByQueryReturnsOnCall == nil {
		fake.listServiceKeysByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceKey
			result2 error
		})
	}
	fake.listServiceKeysByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicePlansByQuery(arg1 url.Values) ([]cfclient.ServicePlan, error) {
	fake.listServicePlansByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlansByQueryReturnsOnCall[len(fake.listServicePlansByQueryArgsForCall)]
	fake.listServicePlansByQueryArgsForCall = append(fake.listServicePlansByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServicePlansByQueryStub
	fakeReturns := fake.listServicePlansByQueryReturns
	fake.recordInvocation("ListServicePlansByQuery", []interface{}{arg1})
	fake.listServicePlansByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServicePlansByQueryCallCount() int {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return len(fake.listServicePlansByQueryArgsForCall)
}

func (fake *FakeClient) ListServicePlansByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = stub
}

func (fake *FakeClient) ListServicePlansByQueryArgsForCall(i int) url.Values {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlansByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServicePlansByQueryReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	fake.listServicePlansByQueryReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicePlansByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	if fake.listServicePlansByQueryReturnsOnCall == nil {
		fake.listServicePlansByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicesByQuery(arg1 url.Values) ([]cfclient.Service, error) {
	fake.listServicesByQueryMutex.Lock()
	ret, specificReturn := fake.listServicesByQueryReturnsOnCall[len(fake.listServicesByQueryArgsForCall)]
	fake.listServicesByQueryArgsForCall = append(fake.listServicesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServicesByQueryStub
	fakeReturns := fake.listServicesByQueryReturns
	fake.recordInvocation("ListServicesByQuery", []interface{}{arg1})
	fake.listServicesByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServicesByQueryCallCount() int {
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	return len(fake.listServicesByQueryArgsForCall)
}

func (fake *FakeClient) ListServicesByQueryCalls(stub func(url.Values) ([]cfclient.Service, error)) {
	fake.listServicesByQueryMutex.Lock()
	defer fake.listServicesByQueryMutex.Unlock()
	fake.ListServicesByQueryStub = stub
}

func (fake *FakeClient) ListServicesByQueryArgsForCall(i int) url.Values {
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	argsForCall := fake.listServicesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServicesByQueryReturns(result1 []cfclient.Service, result2 error) {
	fake.listServicesByQueryMutex.Lock()
	defer fake.listServicesByQueryMutex.Unlock()
	fake.ListServicesByQueryStub = nil
	fake.listServicesByQueryReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicesByQueryReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.listServicesByQueryMutex.Lock()
	defer fake.listServicesByQueryMutex.Unlock()
	fake.ListServicesByQueryStub = nil
	if fake.listServicesByQueryReturnsOnCall == nil {
		fake.listServicesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getAppByGuidMutex.RLock()
	defer fake.getAppByGuidMutex.RUnlock()
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	fake.listServicesByQueryMutex.RLock()
	defer fake.listServicesByQueryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ find_bindings.Client = new(FakeClient)
